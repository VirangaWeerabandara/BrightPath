name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]  

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/brightpath-frontend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/brightpath-frontend:latest
        cache-to: type=inline
    
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/brightpath-backend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/brightpath-backend:latest
        cache-to: type=inline
    
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        script: |
          # Pull latest images
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/brightpath-frontend:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/brightpath-backend:latest
          
          # Create env files if they don't exist
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > .env.frontend
          
          cat << EOF > .env.backend
          MONGO_URI=${{ secrets.MONGO_URI }}
          PORT=${{ secrets.PORT }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          SECRET=${{ secrets.SECRET }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          EOF
          
          # Create docker-compose file if it doesn't exist
          cat << EOF > docker-compose.yml
          version: '3'
          services:
            frontend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/brightpath-frontend:latest
              restart: always
              ports:
                - "3000:3000"
              env_file:
                - .env.frontend
            
            backend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/brightpath-backend:latest
              restart: always
              ports:
                - "4000:4000"
              env_file:
                - .env.backend
          EOF
          
          # Stop and remove existing containers
          docker-compose down
          
          # Start new containers
          docker-compose up -d